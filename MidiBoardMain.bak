;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname MidiBoardMain) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require rsound)
(require 2htdp/universe)
(require 2htdp/image)
(require racket/list)

;ms is a world state
;ms includes
;volume - decimal 0.0 - 1.0
;pressed? - list of booleans that indicate what keys are being pressed
;octave - number between 0 and 8 that indicate the midi number for each key
;kit - a structure that indicates path and integer value (make-kit "vgame" 60)
;record? - boolean that indicates if the sounds are being recorded
;recordlength - frames long of the recording
;rate - a multiplier of how fast soundws are played
;tempo - how fast the metronome moves in bpm (needs to convert from frames per second)
(define-struct ms (volume pressed? Plength octave kit record? recordlength rate tempo))

;========================================================================
;colorKey outputs a rectangle color based on what it's original color was
;and whether it's currently pressed or not
; WorldState(ms) number number -> string
(define (colorKey ws index col)
  (cond
   
    [(equal? 1 col ) 
    (cond
      [(equal? (list-ref (ms-pressed? ws) index) #t) "red"]
      [else "black"])
    ]
    [(equal? 0 col)
     (cond
      [(equal? (list-ref (ms-pressed? ws) index) #t) "red"]
      [else "white"])
    ]
    [else "green"] 
    ))



;defining function RENDER which takes a ms
;ms -> ms
;function toggles keys based on the keytracker function to appear red when a button is pressed
(define (RENDER ms)
  (place-image 
   (underlay/offset
    (overlay/offset (overlay/offset (rectangle 2000 300 "solid" "black") -133 200 (overlay (circle 30 "solid" "cyan")(circle 35 "solid" "black")))
                   200
                   300               
   (overlay/xy
            (beside
              (overlay/xy (rectangle 67.5 210.825 "outline" (colorKey ms 0 1)) 20 140 (text "C" 40 "black"))
              (overlay/xy (rectangle 67.5 210.825 "outline" (colorKey ms 2 1)) 20 140 (text "D" 40 "black"))
              (overlay/xy (rectangle 67.5 210.825 "outline" (colorKey ms 4 1)) 20 140 (text "E" 40 "black"))
              (overlay/xy (rectangle 67.5 210.825 "outline" (colorKey ms 5 1)) 20 140 (text "F" 40 "black"))
              (overlay/xy (rectangle 67.5 210.825 "outline" (colorKey ms 7 1)) 20 140 (text "G" 40 "black"))
              (overlay/xy (rectangle 67.5 210.825 "outline" (colorKey ms 9 1)) 20 140 (text "A" 40 "black"))
              (overlay/xy (rectangle 67.5 210.825 "outline" (colorKey ms 11 1))20 140 (text "B" 40 "black"))
              (overlay/xy (rectangle 67.5 210.825 "outline" "BlAcK")20 140 (text "C" 40 "black")))     
            0
            0
     ;For this set of rectangles, all rectangles with col == 0 will turn red for the corresponding white key
             (beside
                     (rectangle 35 140.5485 "solid" (colorKey ms 0 0))
                     (underlay/xy (rectangle 43.5 140.5485 "solid" (colorKey ms 1 1)) 0 60 (text "C#" 20 "white"))
                     (rectangle 34.5 140.5485  "solid" (colorKey ms 2 0))
                     (underlay/xy(rectangle 43.5 140.5485 "solid" (colorKey ms 3 1))0 60 (text "D#" 20 "white"))
                     (rectangle 37.5 140.5485  "solid" (colorKey ms 4 0))
                     (rectangle 37.5 140.5485  "solid" (colorKey ms 5 0))
                     (underlay/xy(rectangle 43.5 140.5485 "solid" (colorKey ms 6 1))0 60 (text "F#" 20 "white"))
                     (rectangle 34.5 140.5485  "solid" (colorKey ms 7 0))
                     (underlay/xy(rectangle 43.5 140.5485  "solid" (colorKey ms 8 1))0 60 (text "G#" 20 "white"))
                     (rectangle 34.5 140.5485  "solid" (colorKey ms 9 0))
                     (underlay/xy(rectangle 43.5 140.5485  "solid" (colorKey ms 10 1))0 60 (text "A#" 20 "white"))
                     (rectangle 35 140.5485 "solid" (colorKey ms 11 0))
                      )
              ))
    200
    -100
    (overlay/xy
     (beside
                 (rectangle 100 50 "solid" "purple")
                 (rectangle 100 50 "solid" "black")
                 (rectangle 100 50 "solid" "purple")
                 (rectangle 100 50 "solid" "black")
                 (rectangle 100 50 "solid" "purple")
          )
     0
     -100
     (beside
                 (rectangle 100 50 "solid" "purple")
                 (rectangle 100 50 "solid" "black")
                 (rectangle 100 50 "solid" "purple")
                 (rectangle 100 50 "solid" "black")
                 (rectangle 100 50 "solid" "purple")
          )
     )
    )
            200
            200
            (empty-scene 750 500)
      )
  )
  

;=======================================================


;kit is a structure from the worldstate that includes
;kitname - a string that determines the family "vgame"
;kitnumber - a whole number that deterimess the number
(define-struct kit (kitname kitnum))

;test variables defined for you guessed it, testing
(define testkit (make-kit "vgame" 50))
(define test (make-ms .8 '(#f #f #f #f #f #f #f #f #f #f #f #f #f) '(-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 6 testkit #f 0 1 0))
(define one 44100)


;octavator is a function that converts a number of an octave into the various midi numbers
;number -> list-of-midi
(define (octavator trace) 
(cons (* trace 12) (cons (+ 1 (* trace 12)) (cons (+ 2 (* trace 12)) (cons (+ 3 (* trace 12)) (cons (+ 4 (* trace 12))
      (cons (+ 5 (* trace 12)) (cons (+ 6 (* trace 12)) (cons (+ 7 (* trace 12)) (cons (+ 8 (* trace 12)) (cons (+ 9 (* trace 12))
      (cons (+ 10 (* trace 12)) (cons (+ 11 (* trace 12)) '()))))))))))))

)
;(check-expect (octavator 3) (list 36 37 38 39 40 41 42 43 44 45 46 47))
;(check-expect (octavator 0) (list 0 1 2 3 4 5 6 7 8 9 10 11))

;selector is a helper function that calls a specific element in an octave from a list of numbers
;worldstate index -> midi
(define (selector world index)
  (list-ref (octavator (ms-octave world)) index)
)

;(check-expect (selector test 0) 0)
;(check-expect (selector test 11) 11)


; Creates a new world state with the opposite boolean value at a given index in 
; WorldState number -> Worldstate

;(define-struct ms (volume pressed? Plength octave kit record? recordlength rate tempo))


;oppBool creates a new pressed? list and outputs a new world state
;with an opposite boolean value at the given index
; WorldState(ms) number -> WorldState(ms)
(define (oppBool ws index)
  (make-ms (ms-volume ws)
           (list-set (ms-pressed? ws) index (not(list-ref (ms-pressed? ws) index )) )

           (list-set (ms-Plength ws) index
                    (cond
                     [(equal? -1 (list-ref (ms-Plength ws) index )) 0]
                     [else -1]
                     )
                    )
           
           (ms-octave ws) (ms-kit ws) (ms-record? ws) (ms-recordlength ws) (ms-rate ws) (ms-tempo ws))
  )

;(synth-note (kit-kitname (ms-kit world)) (kit-kitnum (ms-kit world)) (selector world 0) one)

;Octav takes in a worldstate and a number
;then changes or doesn't change the octave based on the current world
;eithering increasing or decreasing the octave
;WorldState(ms) Number -> WorldState(ms)
(define (octav world funct)
  (cond
    [(and (equal? 0 (ms-octave world))(equal? funct 0)) (make-ms (ms-volume world) (make-list 12 #f) (make-list 12 -1) (ms-octave world) (ms-kit world) (ms-record? world) (ms-recordlength world) (ms-rate world) (ms-tempo world))]
    [(and (equal? 8 (ms-octave world))(equal? funct 1)) (make-ms (ms-volume world) (make-list 12 #f) (make-list 12 -1) (ms-octave world) (ms-kit world) (ms-record? world) (ms-recordlength world) (ms-rate world) (ms-tempo world))]
    [ else  (make-ms (ms-volume world) (make-list 12 #f) (make-list 12 -1)
                     (cond
                    [(equal? funct 0) (- (ms-octave world) 1)]
                    [else (+ (ms-octave world) 1)]
                     )
                     (ms-kit world) (ms-record? world) (ms-recordlength world) (ms-rate world) (ms-tempo world))]
))

;Vol takes in a worldstate and a number
;then changes or doesn't change the volume based on the current world
;eithering increasing or decreasing the volume
;WorldState(ms) Number -> WorldState(ms)
(define (vol world funct)
  (cond
    [(and (equal? 1 (ms-octave world))(equal? funct 0)) (make-ms (ms-volume world) (make-list 12 #f) (make-list 12 -1) (ms-octave world) (ms-kit world) (ms-record? world) (ms-recordlength world) (ms-rate world) (ms-tempo world))]
    [(and (equal? 0 (ms-octave world))(equal? funct 1)) (make-ms (ms-volume world) (make-list 12 #f) (make-list 12 -1) (ms-octave world) (ms-kit world) (ms-record? world) (ms-recordlength world) (ms-rate world) (ms-tempo world))]
    [ else  (make-ms
             (cond
                    [(equal? funct 0) (- (ms-volume world) 0.1)]
                    [else (+ (ms-volume world) 0.1)]
                     )
             (make-list 12 #f) (make-list 12 -1) (ms-octave world) (ms-kit world) (ms-record? world) (ms-recordlength world) (ms-rate world) (ms-tempo world))]
))


;keytracker is a function that maps midi notes to keys based on the octave and produces a make-tone
;worldstate key -> rsound
(define (keytracker world key)
  (cond [(key=? "a" key)  (oppBool world 0)]
        [(key=? "w" key)  (oppBool world 1)]
        [(key=? "s" key)  (oppBool world 2)]
        [(key=? "e" key)  (oppBool world 3)]
        [(key=? "d" key)  (oppBool world 4)]
        [(key=? "f" key)  (oppBool world 5)]
        [(key=? "t" key)  (oppBool world 6)]
        [(key=? "g" key)  (oppBool world 7)]
        [(key=? "y" key)  (oppBool world 8)]
        [(key=? "h" key)  (oppBool world 9)]
        [(key=? "u" key)  (oppBool world 10)]
        [(key=? "j" key)  (oppBool world 11)]
        [(key=? "[" key) (octav world 0) ]
        [(key=? "]" key) (octav world 1) ]
         [(key=? "[" key) (octav world 0) ]
        [(key=? "]" key) (octav world 1) ]
        [(key=? "-" key) (vol world 0) ]
        [(key=? "=" key) (vol world 1) ]
        [(key=? "escape" key) (exit) ]
        [else (make-ms (ms-volume world) (make-list 12 #f) (make-list 12 -1) (ms-octave world) (ms-kit world) (ms-record? world) (ms-recordlength world) (ms-rate world) (ms-tempo world))]
)
  )

;(kit-kitname (ms-kit test))
;(check-expect (keytracker test "f") (synth-note "vgame" 50 5 44100))


;world->list is a function that extracrts the pressed? list from a world
;world -> list-of-sounds
(define (world->list world)
    (ms-pressed? world)
)
;(check-expect (world->list test) (make-list 13 #f))


;synthcreation is a function that takes in a world state and a list and makes a synthnote
;worldstate boolean number -> synthnote
(define (synthcreation world i)
  (synth-note (kit-kitname (ms-kit world)) (kit-kitnum (ms-kit world)) (+ (* 12 (+ 1 (ms-octave world))) i) 44100)
  
  )
;(check-expect (synthcreation test 2) (synth-note "vgame" 50 86 44100))


;soundconverter is a function that converts the pressed booleans into a list-of-rsounds based on the worldstate
;worldstate list-of-soounds number-> list-of-rsounds
(define (soundconverter world listy index)
 (cond [(empty? listy) '()]
       [else (cond
               [(first listy) (cons (synthcreation world index) (soundconverter world (rest listy) (+ 1 index)))]
               [else (soundconverter world (rest listy) (+ 1 index))])])
 )
;(check-expect (soundconverter test (make-list 13 #f) 0) '())
;(check-expect (soundconverter test (list #f #f #t #t #t #f #f #f #f #f #f #f #f) 0) (list (synth-note "vgame" 50 86 44100) (synth-note "vgame" 50 87 44100) (synth-note "vgame" 50 88 44100)))


;soundoverlay is a function that takes in a list of r-sounds and overlays them
;list-of-rsounds -> rsound
(define (soundoverlay lor)
  (cond [(empty? lor) (silence 1)]
        [else (rs-overlay* lor)])
  )

;(check-expect (soundoverlay '()) (silence 1))
;(check-expect (soundoverlay (list (synth-note "vgame" 50 86 44100) (synth-note "vgame" 50 87 44100) (synth-note "vgame" 50 88 44100))) (rs-overlay* (list (synth-note "vgame" 50 86 44100) (synth-note "vgame" 50 87 44100) (synth-note "vgame" 50 88 44100))))


;Scon takes in a world and a number
; then returns a synth note or silence based on whether or not a piano key is being pressed
; WorldState(ms) Number -> WorldState(ms)
(define (scon world index)
 #| (cond
    [(empty? pressed) '()]
    [else
    (cond
       [(= (length (ms-pressed? world)) (+ start 1)) '()]
      [(equal? #f (first (ms-pressed? world))) (cons (silence 1) (sound_list (rest pressed) world (+ start 1)))]
      ; [(equal? -1 (first (ms-Plength world))) (cons (silence 1) (sound_list (rest pressed) world (+ start 1)))]
       [else (cons (synth-note (kit-kitname (ms-kit world)) (kit-kitnum (ms-kit world)) (selector world start) 48000) (sound_list (rest pressed) world (+ start 1)))]
     )
    ]
    ) |#
  (cond
    [(list-ref (ms-pressed? world) index)(synth-note (kit-kitname (ms-kit world)) (kit-kitnum (ms-kit world)) (selector world index) 12000) ]
    [else (silence 1)]
 ))

;Tock takes in a WorldState and plays a sound and or silence
;Based on the WorldState
;WorldState -> WorldState
(define (tock y)
  (andplay (rs-scale  (ms-volume y) (rs-overlay* (list (scon y 0)(scon y 1)(scon y 2)(scon y 3)(scon y 4)(scon y 5)(scon y 6)(scon y 7)(scon y 8)(scon y 9)(scon y 10)(scon y 11) )))
        (make-ms (ms-volume y) (ms-pressed? y) (ms-Plength y) (ms-octave y) (ms-kit y) (ms-record? y) (ms-recordlength y) (ms-rate y) (ms-tempo y)))
)


(define (Midi y)
    (big-bang y
              [on-tick tock 0.1]     
              [to-draw RENDER]
              [on-key keytracker]
              [on-release keytracker]
              )
    )

(Midi test)